(setq inhibit-splash-screen t)
(setq initial-scratch-message "")
(switch-to-buffer "*scratch*")

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(global-hi-lock-mode t)
 '(global-hl-line-mode t)
 '(package-selected-packages
   (quote
    (aggressive-indent 0blayout 0xc cider clojure-mode clojure-snippets yasnippet js2-mode prettier-js evil-smartparens smartparens key-chord nlinum-relative linum-relative flx evil-avy evil-colemak-basics evil-leader evil-paredit evil-surround evil evil-tutor ivy company helm-company helm-ag helm markdown-mode exec-path-from-shell ag avy))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(hl-line ((t (:background "#1b1b1b"))))
 '(ido-first-match ((t (:foreground "IndianRed1" :weight bold))))
 '(ido-indicator ((t (:foreground "yellow1" :width condensed))))
 '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "Yellow"))))
 '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "Red"))))
 '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "orchid"))))
 '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "CadetBlue1"))))
 '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "Blue"))))
 '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "Green"))))
 '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "aquamarine1"))))
 '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "Magenta")))))

(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

(setq ag-reuse-buffers 't)

(setq make-backup-files nil)

(setq auto-save-default nil)

(require 're-builder)
(setq reb-re-syntax 'string)

(tool-bar-mode -1)

(require 'flyspell)
(flyspell-mode +1)
(setq ispell-program-name "aspell")
(dolist (hook '(text-mode-hook))
      (add-hook hook (lambda () (flyspell-mode 1))))

(require 'yasnippet)
(yas-global-mode 1)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq c-default-style "linux"
          c-basic-offset 4)

(load-theme 'manoj-dark t)   

(require 'rainbow-delimiters)

(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)


(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c p") 'counsel-yank-pop)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
(setq ivy-re-builders-alist '((swiper . ivy--regex) (t . ivy--regex-fuzzy)))

(ivy-set-actions 'counsel-ag
		    '(("f"
		    (lambda (x)
		      (string-match ".*:" x)
      (kill-new (file-name-base (match-string 0 x))))
    "Copy file base")))

	       

(require 'evil)
  (evil-mode 1)
(global-evil-surround-mode 1)
(global-evil-leader-mode)
(evil-leader/set-leader "<SPC>")
(evil-leader/set-key
  "w" 'evil-window-map)

(setq evil-normal-state-tag   (propertize " <N> " 'face '((:background "Yellow"         :foreground "black")))
      evil-emacs-state-tag    (propertize " <E> " 'face '((:background "Firebrick"      :foreground "White")))
      evil-insert-state-tag   (propertize " <I> " 'face '((:background "Chartreuse1"    :foreground "Black")))
      evil-replace-state-tag  (propertize " <R> " 'face '((:background "chocolate"      :foreground "black")))
      evil-motion-state-tag   (propertize " <M> " 'face '((:background "plum3"          :foreground "black")))
      evil-visual-state-tag   (propertize " <V> " 'face '((:background "LightBlue1"     :foreground "black")))
      evil-operator-state-tag (propertize " <O> " 'face '((:background "sandy brown"    :foreground "black"))))

(global-hl-line-mode 1)

(define-key evil-motion-state-map (kbd "M-SPC") #'avy-goto-word-1)
(define-key evil-motion-state-map (kbd "C-SPC") #'avy-goto-char)

(set-face-attribute 'hl-line nil :foreground nil :background "gray26")
(add-hook 'evil-normal-state-entry-hook
          (lambda ()
            (global-hl-line-mode 1)))
(add-hook 'evil-normal-state-exit-hook
          (lambda ()
            (global-hl-line-mode 0)))

;; (require 'helm)
;; (helm-mode 1)
;; (global-set-key (kbd "M-x") #'helm-M-x)
;; (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
;; (global-set-key (kbd "C-x C-f") #'helm-find-files)
;; (global-set-key (kbd "C-x b") #'helm-buffers-list)
;; (global-set-key (kbd "M-y") #'helm-show-kill-ring)
;; (setq-default helm-mode-fuzzy-match t)
;; (setq-default helm-completion-in-region-fuzzy-match t)
;; (setq-default helm-M-x-fuzzy-match t)


;; (add-hook 'after-init-hook 'global-company-mode)

;; (setq company-dabbrev-downcase 0)
;; (setq company-idle-delay 0)

;; (defun text-mode-hook-setup ()
;;  (make-local-variable 'company-backends)
;;  (add-to-list 'company-backends 'company-ispell))

;; (add-hook 'text-mode-hook 'text-mode-hook-setup)

(require 'linum-relative)
(defun noct:linum-setup ()
  "Use absolute line numbers in insert state and relative ones in normal state.
Applies only for the current buffer."
  (linum-mode)
  ;; maybe useful if you're not using normal as the initial state
  (when (eq evil-state 'normal)
    (linum-relative-on))
  (add-hook 'evil-insert-state-exit-hook #'linum-relative-on nil t)
  (add-hook 'evil-insert-state-entry-hook #'global-linum-mode nil)
  (add-hook 'evil-insert-state-entry-hook #'linum-relative-off nil t)
  (add-hook 'evil-insert-state-entry-hook #'global-linum-mode t))

(add-hook 'prog-mode-hook #'noct:linum-setup)

(require 'key-chord)
(key-chord-mode 1)
(key-chord-define evil-insert-state-map  "lh" 'evil-normal-state)
(key-chord-define evil-visual-state-map  "lh" 'evil-normal-state)

(setq avy-keys '(?a ?r ?s ?t ?h ?n ?e ?i))

     (add-hook 'dired-load-hook
               (lambda ()
                 (load "dired-x")
                 ;; Set dired-x global variables here.  For example:
                 ;; (setq dired-guess-shell-gnutar "gtar")
                 ;; (setq dired-x-hands-off-my-keys nil)
                 ))
     (add-hook 'dired-mode-hook
               (lambda ()
                 ;; Set dired-x buffer-local variables here.  For example:
                 ;; (dired-omit-mode 1)
                 ))
(require 'smartparens-config)

(add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)
(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
(add-hook 'lisp-mode-hook #'smartparens-mode)
(add-hook 'lisp-interaction-mode-hook #'smartparens-mode)
(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
(add-hook 'cider-repl-mode-hook #'smartparens-strict-mode)

(add-hook 'clojure-mode-hook #'smartparens-strict-mode)
(add-hook 'lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'lisp-interaction-mode-hook #'aggressive-indent-mode)
(add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
(add-hook 'cider-repl-mode-hook #'aggressive-indent-mode)


(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; Better imenu
(add-hook 'js2-mode-hook #'js2-imenu-extras-mode)

(add-hook 'js2-mode-hook 'prettier-js-mode)
(add-hook 'web-mode-hook 'prettier-js-mode)
